{"version":3,"sources":["img/galaxy1.jpg","img/galaxy2.jpg","img/galaxy3.jpeg","img/galaxy4.jpeg","img/galaxy5.jpeg","img/galaxy6.jpeg","img/galaxy7.png","img/galaxy8.jpg","img/galaxy9.jpg","img/galaxy10.jpg","img/galaxy11.jpg","img/galaxy12.jpg","img/background.jpg","components/Counter.js","components/Nav.jsx","components/Jumbotron.jsx","components/ImageTile.jsx","components/ImageGrid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Counter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","score","TopScore","react_default","a","createElement","Navbar_default","Text","style","navCounter","setState","React","Component","margin","float","position","right","counterStyle","Nav","fluid","bg","Brand","href","components_Counter","max","jumbotronStyle","height","backgroundImage","background","backgroundSize","align","color","centerText","display","justifyContent","alignItems","ReactJumbotron","Jumbotron","ImageTile","clicked","imageArray","image1","image2","image3","image4","image5","image6","image7","image8","image9","image10","image11","image12","getRandomInt","Math","floor","random","console","log","tileStyle","Image","imageStyle","src","width","backgroundColor","borderColor","borderWidth","borderStyle","ImageGrid","Container","Row","rowStyle","className","Col","colStyle","components_ImageTile","App","components_Nav","components_Jumbotron","components_ImageGrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3deaaed0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/galaxy1.54f48262.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy2.27cb20e1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy3.12ac01ea.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy4.01d0c93a.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy5.7274d8d3.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy6.37330f70.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy7.3ea4ed3b.png\";","module.exports = __webpack_public_path__ + \"static/media/galaxy8.d4e728e7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy9.e4067967.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy10.e6a3db73.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy11.dbf28f36.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy12.b061e2dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/background.6b170b4f.jpg\";","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar'\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        score: 0,\n        TopScore: 0 \n      };\n  }\n\n  render() {\n    return (\n    <Navbar.Text style={navCounter}>  \n    Score: {this.state.score} \n    Top Score: {this.state.TopScore} \n    </Navbar.Text>);\n  }\n\n  componentDidMount() {\n     this.setState({ score: this.props.score});\n     this.setState({ TopScore: this.props.TopScore});\n  }\n\n  componentDidUpdate() {\n      \n  }\n  \n}\nconst navCounter = {\n  margin:'0 auto',\n  float: 'none',\n  position:'absolute',\n  right:'10px'\n\n}\nexport default Counter;\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Counter from './Counter';\n\nfunction Nav(props) {\n    return (        \n        <Navbar fluid bg=\"light\">\n        <Navbar.Brand href=\"#home\">Clicky Game</Navbar.Brand>\n        <Navbar.Text>Click an image to begin! </Navbar.Text>\n        <Counter style={counterStyle} score={4} TopScore={6}/>\n        </Navbar>\n        );\n}\n\nconst counterStyle = {\n  margin:'0 auto'\n}\n\nexport default Nav","import React from 'react';\nimport { Jumbotron, Image } from 'react-bootstrap';\nimport background from '../img/background.jpg';\n\nfunction ReactJumbotron() {\n    return (\n        <Jumbotron style={jumbotronStyle}>\n            <h1>Clicky Game</h1>\n            <h2 style={centerText}>Click on an image to earn points, but don't click on any more than once!</h2>\n        </Jumbotron>\n    );\n}\n\nconst jumbotronStyle = {\n    height: '400px',\n    backgroundImage: 'url(' + background + ')',\n    backgroundSize: 'cover',\n    align: 'center',\n    color: 'white', \n}\n\nconst centerText = {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n}\n\nexport default ReactJumbotron","import React from 'react';\nimport { Image } from 'react-bootstrap';\nimport image1 from '../img/galaxy1.jpg';\nimport image2 from '../img/galaxy2.jpg';\nimport image3 from '../img/galaxy3.jpeg';\nimport image4 from '../img/galaxy4.jpeg';\nimport image5 from '../img/galaxy5.jpeg';\nimport image6 from '../img/galaxy6.jpeg';\nimport image7 from '../img/galaxy7.png';\nimport image8 from '../img/galaxy8.jpg';\nimport image9 from '../img/galaxy9.jpg';\nimport image10 from '../img/galaxy10.jpg';\nimport image11 from '../img/galaxy11.jpg';\nimport image12 from '../img/galaxy12.jpg';\n\nclass ImageTile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.clicked = 0;\n    }\n    \n    render() {\n        const imageArray = [image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12];\n        function getRandomInt(max) {\n            return Math.floor(Math.random() * Math.floor(max));\n        }\n        console.log(getRandomInt(12));\n        return (\n            <div style={tileStyle}>\n                <p>{getRandomInt(12)}</p>\n                <Image style={imageStyle} src={[imageArray[getRandomInt(12)]]}></Image>\n            </div>\n        );\n    }\n}\nconst imageArray = [image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12];\n        function getRandomInt(max) {\n            return Math.floor(Math.random() * Math.floor(max));\n        }\n        console.log(getRandomInt(12));\nconst imageStyle = {\n    height: '150px',\n    width: '150px',\n    color: 'white'\n}\n\nconst tileStyle = {\n    height: '150px',\n    width: '150px',\n    backgroundColor: 'Black',\n    borderColor: 'black',\n    borderWidth: '2px',\n    borderStyle: 'inline',\n    color: 'white'\n}\n\nexport default ImageTile;","import React from \"react\";\nimport {Row,Col,Container} from 'react-bootstrap';\nimport ImageTile from '../components/ImageTile';\n\nclass ImageGrid extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = 0;\n    }\n    render() {\n        return (\n            <Container>\n            <Row style={rowStyle} className=\"justify-content-md-center\">\n              <Col style={colStyle}>1 of 3 <ImageTile /></Col>\n              <Col style={colStyle}>2 of 3 <ImageTile /></Col>\n              <Col style={colStyle}>3 of 3 <ImageTile /></Col>\n            </Row>\n            <Row style={rowStyle}>\n              <Col style={colStyle}>1 of 3 <ImageTile /></Col>\n              <Col style={colStyle}>2 of 3 <ImageTile /></Col>\n              <Col style={colStyle}>3 of 3 <ImageTile /></Col>\n            </Row>\n            <Row style={rowStyle}>\n              <Col style={colStyle}>1 of 3 <ImageTile /></Col>\n              <Col style={colStyle}>2 of 3 <ImageTile /></Col>\n              <Col style={colStyle}>3 of 3 <ImageTile /></Col>\n            </Row>\n          </Container>\n        );\n    }\n}\n\nconst colStyle = {\n    height: '300px',\n    width: '300px'\n  }\n  \n  const rowStyle = {\n    height: '300px',\n     width:'100%'\n  }\n\nexport default ImageGrid;","import React from 'react';\nimport Nav from './components/Nav.jsx'\nimport './App.css';\nimport Jumbotron from './components/Jumbotron.jsx';\nimport ImageGrid from './components/ImageGrid';\nfunction App() {\n\n  function shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n  \n  // Used like so\n\n  return (\n    <div className=\"App\">\n      \n      <Nav />\n      <Jumbotron />\n      <ImageGrid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}