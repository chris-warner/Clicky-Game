{"version":3,"sources":["img/galaxy1.jpg","img/galaxy2.jpg","img/galaxy3.jpeg","img/galaxy4.jpeg","img/galaxy5.jpeg","img/galaxy6.jpeg","img/galaxy7.png","img/galaxy8.jpg","img/galaxy9.jpg","img/galaxy10.jpg","img/galaxy11.jpg","img/galaxy12.jpg","img/background.jpg","components/Counter.js","components/ImageGrid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Counter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","score","TopScore","react_default","a","createElement","Navbar_default","Text","style","navCounter","setState","React","Component","margin","float","position","right","ImageGrid","_this2","shuffledImageArray","image1","image2","image3","image4","image5","image6","image7","image8","image9","image10","image11","image12","shuffle","key","image","isClicked","checkScore","console","log","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","item","value","err","return","newShuffle","forceUpdate","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","componentDidUpdate","Navbar","fluid","bg","Brand","href","components_Counter","counterStyle","Jumbotron","jumbotronStyle","centerText","Container","Row","rowStyle","className","Col","colStyle","Image","imgStyle","src","onClick","height","width","backgroundImage","background","backgroundSize","align","color","display","justifyContent","alignItems","App","components_ImageGrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qgBCGlCC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,MAAO,EACPC,SAAU,GAJGT,wEASjB,OACAU,EAAAC,EAAAC,cAACC,EAAAF,EAAOG,KAAR,CAAaC,MAAOC,GAApB,UACQb,KAAKI,MAAMC,MADnB,cAEYL,KAAKI,MAAME,sDAKtBN,KAAKc,SAAS,CAAET,MAAOL,KAAKJ,MAAMS,QAClCL,KAAKc,SAAS,CAAER,SAAUN,KAAKJ,MAAMU,gEAnBpBS,IAAMC,WA2BtBH,EAAa,CACjBI,OAAO,SACPC,MAAO,OACPC,SAAS,WACTC,MAAM,QAGOzB,qBClBT0B,cACJ,SAAAA,EAAYzB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IACjBxB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,EACPC,SAAU,GAJKT,wEAUV,IAAAyB,EAAAtB,KAwELuB,GApEgBC,IAAQC,IAAQC,IAAQC,IAAQC,IAAQC,IAAQC,IAAQC,IAAQC,IAAQC,IAASC,IAASC,IAoErFC,EAhEA,CAEN,CACbC,IAAI,EACNC,MAAOd,IACPe,WAAU,GAEG,CACbF,IAAI,EACJC,MAAOb,IACPc,WAAU,GAEG,CACbF,IAAI,EACJC,MAAOZ,IACPa,WAAU,GAEG,CACbF,IAAI,EACJC,MAAOX,IACPY,WAAU,GAEG,CACbF,IAAI,EACJC,MAAOV,IACPW,WAAU,GAEG,CACbF,IAAI,EACJC,MAAOT,IACPU,WAAU,GAEG,CACbF,IAAI,EACJC,MAAOR,IACPS,WAAU,GAEG,CACbF,IAAI,EACJC,MAAOP,IACPQ,WAAU,GAEG,CACbF,IAAI,EACJC,MAAON,IACPO,WAAU,GAEI,CACdF,IAAI,GACJC,MAAOL,IACPM,WAAU,GAEI,CACdF,IAAI,GACJC,MAAOJ,IACPK,WAAU,GAEI,CACdF,IAAI,GACJC,MAAOH,IACPI,WAAU,MAUb,IAAMC,EAAa,SAACH,GACnBI,QAAQC,IAAIL,GADe,IAAAM,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAE3B,QAAAC,EAAAC,EAAiBzB,EAAjB0B,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAqC,KAA5BU,EAA4BN,EAAAO,MAC/BD,EAAKhB,MAAQA,IACfgB,EAAKd,WAAY,IAJM,MAAAgB,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,GAO3B,IAAMY,EAAarB,EAAQb,GAC3BkB,QAAQC,IAAIe,GAEZpD,KAEAoC,QAAQC,IAAIrC,IACZiB,EAAKoC,eAQP,SAAStB,EAAQuB,GAIf,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EAGT,OAxBA3D,KAAKmE,mBAAqB,WACxB1B,QAAQC,IAAI,YAwBZnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAQC,OAAK,EAACC,GAAG,SACf/D,EAAAC,EAAAC,cAAC2D,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,eACAjE,EAAAC,EAAAC,cAAC2D,EAAA,EAAOzD,KAAR,kCACAJ,EAAAC,EAAAC,cAACgE,EAAD,CAAS7D,MAAO8D,EAAcrE,MAAOA,GAAOC,SAAUA,MAExDC,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAW/D,MAAOgE,IAChBrE,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,MAAIG,MAAOiE,IAAX,6EAEFtE,EAAAC,EAAAC,cAACqE,EAAA,EAAD,KACEvE,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAKnE,MAAOoE,EAAUC,UAAU,6BAC9B1E,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKtE,MAAOuE,GAAU5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOxE,MAAOyE,EAAUC,IAAK/D,EAAmB,GAAGe,MAAOiD,QAAS,WAAK/C,EAAWjB,EAAmB,GAAGc,QAA/H,KACA9B,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKtE,MAAOuE,GAAU5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOxE,MAAOyE,EAAUC,IAAK/D,EAAmB,GAAGe,MAAOiD,QAAS,WAAK/C,EAAWjB,EAAmB,GAAGc,QAA/H,KACA9B,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKtE,MAAOuE,GAAU5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOxE,MAAOyE,EAAUC,IAAK/D,EAAmB,GAAGe,MAAOiD,QAAS,WAAK/C,EAAWjB,EAAmB,GAAGc,QAA/H,MAEF9B,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAKnE,MAAOoE,GACVzE,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKtE,MAAOuE,GAAU5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOxE,MAAOyE,EAAUC,IAAK/D,EAAmB,GAAGe,MAAOiD,QAAS,WAAK/C,EAAWjB,EAAmB,GAAGc,SAC/H9B,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKtE,MAAOuE,GAAU5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOxE,MAAOyE,EAAUC,IAAK/D,EAAmB,GAAGe,MAAOiD,QAAS,WAAK/C,EAAWjB,EAAmB,GAAGc,SAC/H9B,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKtE,MAAOuE,GAAU5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOxE,MAAOyE,EAAUC,IAAK/D,EAAmB,GAAGe,MAAOiD,QAAS,WAAK/C,EAAWjB,EAAmB,GAAGc,UAEjI9B,EAAAC,EAAAC,cAACsE,EAAA,EAAD,CAAKnE,MAAOoE,GACVzE,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKtE,MAAOuE,GAAU5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOxE,MAAOyE,EAAUC,IAAK/D,EAAmB,GAAGe,MAAOiD,QAAS,WAAK/C,EAAWjB,EAAmB,GAAGc,SAC/H9B,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKtE,MAAOuE,GAAU5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOxE,MAAOyE,EAAUC,IAAK/D,EAAmB,GAAGe,MAAOiD,QAAS,WAAK/C,EAAWjB,EAAmB,GAAGc,SAC/H9B,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAKtE,MAAOuE,GAAU5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOxE,MAAOyE,EAAUC,IAAK/D,EAAmB,GAAGe,MAAOiD,QAAS,WAAK/C,EAAWjB,EAAmB,GAAGc,mBA1JjHtB,IAAMC,WAkKxBqE,EAAW,CACfG,OAAQ,QACRC,MAAO,SAGHN,EAAW,CACfK,OAAQ,QACRC,MAAO,SAGHT,EAAW,CACfQ,OAAQ,QACRC,MAAO,QAEHf,EAAe,CACnBzD,OAAQ,UAGJ2D,GAAiB,CACrBY,OAAQ,QACRE,gBAAiB,OAASC,IAAa,IACvCC,eAAgB,QAChBC,MAAO,SACPC,MAAO,SAGHjB,GAAa,CACjBkB,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAGV5F,GAAM,EAAGC,GAAS,EAEPe,KCzMA6E,OAVf,WAGE,OACE3F,EAAAC,EAAAC,cAAA,OAAKwE,UAAU,OACb1E,EAAAC,EAAAC,cAAC0F,GAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnG,EAAAC,EAAAC,cAACkG,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3c6c834d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/galaxy1.54f48262.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy2.27cb20e1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy3.12ac01ea.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy4.01d0c93a.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy5.7274d8d3.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy6.37330f70.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy7.3ea4ed3b.png\";","module.exports = __webpack_public_path__ + \"static/media/galaxy8.d4e728e7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy9.e4067967.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy10.e6a3db73.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy11.dbf28f36.jpg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy12.b061e2dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/background.6b170b4f.jpg\";","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar'\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        score: 0,\n        TopScore: 0 \n      };\n  }\n\n  render() {\n    return (\n    <Navbar.Text style={navCounter}>  \n    Score: {this.state.score} \n    Top Score: {this.state.TopScore} \n    </Navbar.Text>);\n  }\n\n  componentDidMount() {\n     this.setState({ score: this.props.score});\n     this.setState({ TopScore: this.props.TopScore});\n  }\n\n  componentDidUpdate() {\n\n  }\n  \n}\nconst navCounter = {\n  margin:'0 auto',\n  float: 'none',\n  position:'absolute',\n  right:'10px'\n\n}\nexport default Counter;\n","import React from 'react'\nimport { Row, Col, Container } from 'react-bootstrap';\nimport image1 from '../img/galaxy1.jpg';\nimport image2 from '../img/galaxy2.jpg';\nimport image3 from '../img/galaxy3.jpeg';\nimport image4 from '../img/galaxy4.jpeg';\nimport image5 from '../img/galaxy5.jpeg';\nimport image6 from '../img/galaxy6.jpeg';\nimport image7 from '../img/galaxy7.png';\nimport image8 from '../img/galaxy8.jpg';\nimport image9 from '../img/galaxy9.jpg';\nimport image10 from '../img/galaxy10.jpg';\nimport image11 from '../img/galaxy11.jpg';\nimport image12 from '../img/galaxy12.jpg';\nimport { Image } from 'react-bootstrap';\nimport { Navbar, Jumbotron } from 'react-bootstrap';\nimport Counter from './Counter';\nimport background from '../img/background.jpg';\n\nclass ImageGrid extends React.Component { \n  constructor(props) {\n    super(props);\n    this.state = {\n      score: 0,\n      TopScore: 0\n    };\n\n  }\n\n\n  render() {\n\n\n  let imageObject1,imageObject2,imageObject3,imageObject4,imageObject5,imageObject6,imageObject7,imageObject8,imageObject9,imageObject10,imageObject11,imageObject12;\n  const imageArray = [image1, image2, image3, image4, image5, image6, image7, image8, image9, image10, image11, image12];\n\n\n\n  const imageObjectArray = [\n\n      imageObject1 = {\n        key:1,\n      image: image1,\n      isClicked:false\n    },\n    imageObject2 = {\n      key:2,\n      image: image2,\n      isClicked:false\n    },\n    imageObject3 = {\n      key:3,\n      image: image3,\n      isClicked:false\n    },\n    imageObject4 = {\n      key:4,\n      image: image4,\n      isClicked:false\n    },\n    imageObject5 = {\n      key:5,\n      image: image5,\n      isClicked:false\n    },\n    imageObject6 = {\n      key:6,\n      image: image6,\n      isClicked:false\n    },\n    imageObject7 = {\n      key:7,\n      image: image7,\n      isClicked:false\n    },\n    imageObject8 = {\n      key:8,\n      image: image8,\n      isClicked:false\n    },\n    imageObject9 = {\n      key:9,\n      image: image9,\n      isClicked:false\n    },\n    imageObject10 = {\n      key:10,\n      image: image10,\n      isClicked:false\n    },\n    imageObject11 = {\n      key:11,\n      image: image11,\n      isClicked:false\n    },\n    imageObject12 = {\n      key:12,\n      image: image12,\n      isClicked:false\n    }\n  ];\n  \n  let shuffledImageArray = shuffle(imageObjectArray);\n\n  function shuffleImages() {\n    shuffledImageArray = shuffle(imageArray);\n  }\n\n   const checkScore = (key) => {\n    console.log(key )\n    for (let item of shuffledImageArray) {\n      if (item.key === key) {\n        item.isClicked = true;\n      }\n    }\n    const newShuffle = shuffle(shuffledImageArray)\n    console.log(newShuffle)\n   // this.state.score = this.state.score+1; \n    score++;\n\n    console.log(score);\n    this.forceUpdate();\n  }\n\n  this.componentDidUpdate = ()=>{\n    console.log(\"updated\");\n\n  }\n\n  function shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  return (\n    <div>\n      <Navbar fluid bg=\"light\">\n        <Navbar.Brand href=\"#home\">Clicky Game</Navbar.Brand>\n        <Navbar.Text>Click an image to begin! </Navbar.Text>\n        <Counter style={counterStyle} score={score} TopScore={TopScore} />\n      </Navbar>\n      <Jumbotron style={jumbotronStyle}>\n        <h1>Clicky Game</h1>\n        <h2 style={centerText}>Click on an image to earn points, but don't click on any more than once!</h2>\n      </Jumbotron>\n      <Container>\n        <Row style={rowStyle} className=\"justify-content-md-center\">\n          <Col style={colStyle}><Image style={imgStyle} src={shuffledImageArray[0].image} onClick={()=>{checkScore(shuffledImageArray[0].key)}} /> </Col>\n          <Col style={colStyle}><Image style={imgStyle} src={shuffledImageArray[1].image} onClick={()=>{checkScore(shuffledImageArray[1].key)}}/> </Col>\n          <Col style={colStyle}><Image style={imgStyle} src={shuffledImageArray[2].image} onClick={()=>{checkScore(shuffledImageArray[2].key)}}/> </Col>\n        </Row>\n        <Row style={rowStyle}>\n          <Col style={colStyle}><Image style={imgStyle} src={shuffledImageArray[3].image} onClick={()=>{checkScore(shuffledImageArray[3].key)}}/></Col>\n          <Col style={colStyle}><Image style={imgStyle} src={shuffledImageArray[4].image} onClick={()=>{checkScore(shuffledImageArray[4].key)}}/></Col>\n          <Col style={colStyle}><Image style={imgStyle} src={shuffledImageArray[5].image} onClick={()=>{checkScore(shuffledImageArray[5].key)}}/></Col>\n        </Row>\n        <Row style={rowStyle}>\n          <Col style={colStyle}><Image style={imgStyle} src={shuffledImageArray[6].image} onClick={()=>{checkScore(shuffledImageArray[6].key)}}/></Col>\n          <Col style={colStyle}><Image style={imgStyle} src={shuffledImageArray[7].image} onClick={()=>{checkScore(shuffledImageArray[7].key)}}/></Col>\n          <Col style={colStyle}><Image style={imgStyle} src={shuffledImageArray[8].image} onClick={()=>{checkScore(shuffledImageArray[8].key)}}/></Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n}\n\nconst imgStyle = {\n  height: '200px',\n  width: '200px'\n}\n\nconst colStyle = {\n  height: '300px',\n  width: '300px'\n}\n\nconst rowStyle = {\n  height: '300px',\n  width: '100%'\n}\nconst counterStyle = {\n  margin: '0 auto'\n}\n\nconst jumbotronStyle = {\n  height: '400px',\n  backgroundImage: 'url(' + background + ')',\n  backgroundSize: 'cover',\n  align: 'center',\n  color: 'white',\n}\n\nconst centerText = {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n}\n\nlet score=0, TopScore=0;\n\nexport default ImageGrid;","import React from 'react';\nimport './App.css';\nimport ImageGrid from './components/ImageGrid.js';\n\nfunction App() {  \n  // Used like so\n\n  return (\n    <div className=\"App\">\n      <ImageGrid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}